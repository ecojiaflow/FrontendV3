// PATH: frontend/ecolojiaFrontV3/src/pages/ChatPage.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { ArrowLeft, Send, MessageCircle, Search, Zap, User, Bot, RefreshCw } from 'lucide-react';

// ‚úÖ CORRECTION: Interfaces locales au lieu d'imports manquants
interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  suggestions?: string[];
}

interface ProductContext {
  productName: string;
  novaGroup?: number;
  healthScore?: number;
  additives?: Array<{ code: string; name: string; riskLevel: string }>;
  ingredients?: string;
  score?: number;
}

// ‚úÖ CORRECTION: Service Chat local simplifi√©
class LocalChatService {
  private history: ChatMessage[] = [];
  private productContext: ProductContext | null = null;

  setProductContext(context: ProductContext | null) {
    this.productContext = context;
  }

  clearHistory() {
    this.history = [];
  }

  getSuggestedQuestions(context?: ProductContext | null): string[] {
    if (context) {
      return [
        `Pourquoi ${context.productName} a ce score ?`,
        "Quels sont les ingr√©dients probl√©matiques ?",
        "Sugg√©rez-moi des alternatives saines",
        "C'est dangereux pour ma sant√© ?",
        "Comment am√©liorer ce produit ?",
        "Explication du groupe NOVA"
      ];
    }
    
    return [
      "Comment fonctionne la classification NOVA ?",
      "Qu'est-ce que l'ultra-transformation ?",
      "Quels additifs √©viter absolument ?",
      "Comment lire une √©tiquette alimentaire ?",
      "Conseils pour une alimentation plus saine",
      "Diff√©rence entre bio et naturel"
    ];
  }

  async sendMessage(message: string, context?: ProductContext): Promise<{ reply: string; suggestions: string[] }> {
    // ‚úÖ Simulation d'attente r√©aliste
    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));

    const lowerMessage = message.toLowerCase();
    let reply = '';
    let suggestions: string[] = [];

    // ‚úÖ CORRECTION: Intelligence conversationnelle am√©lior√©e
    if (lowerMessage.includes('nova') || lowerMessage.includes('classification')) {
      reply = `üî¨ **Classification NOVA** selon INSERM 2024 :

**NOVA 1** ü•¨ : Aliments naturels ou minimalement transform√©s
‚Ä¢ Fruits, l√©gumes, viandes fra√Æches, lait, ≈ìufs, graines
‚Ä¢ Excellent pour la sant√©

**NOVA 2** üßÇ : Ingr√©dients culinaires transform√©s  
‚Ä¢ Huiles, beurre, sucre, sel, vinaigre
‚Ä¢ √Ä utiliser avec mod√©ration

**NOVA 3** üçû : Aliments transform√©s
‚Ä¢ Pain artisanal, conserves simples, fromages
‚Ä¢ Consommation occasionnelle acceptable

**NOVA 4** üö® : Ultra-transform√©s (√† √©viter)
‚Ä¢ Sodas, plats pr√©par√©s, biscuits industriels
‚Ä¢ Riches en additifs et proc√©d√©s industriels`;

      suggestions = [
        "Pourquoi √©viter les NOVA 4 ?",
        "Comment identifier un ultra-transform√© ?",
        "Exemples de produits NOVA 1"
      ];
    }
    else if (lowerMessage.includes('alternative') || lowerMessage.includes('remplacer')) {
      if (context) {
        reply = `üîÑ **Alternatives pour ${context.productName}** :

Voici des options plus saines :
‚Ä¢ **Version bio** : Recherchez l'√©quivalent certifi√© agriculture biologique
‚Ä¢ **Marques artisanales** : Privil√©giez les producteurs locaux
‚Ä¢ **Fait maison** : Pr√©parez votre propre version avec des ingr√©dients simples
‚Ä¢ **Magasins sp√©cialis√©s** : BioCoop, Naturalia, march√©s de producteurs

üí° **Crit√®res de choix** :
‚úÖ Liste d'ingr√©dients courte (< 5 √©l√©ments)
‚úÖ Ingr√©dients que vous reconnaissez
‚úÖ Absence d'additifs E-numbers
‚úÖ Certification bio ou √©quitable`;
      } else {
        reply = `üîÑ **Guide des alternatives saines** :

**M√©thode ECOLOJIA** pour choisir :
1Ô∏è‚É£ **Lisez les ingr√©dients** - plus c'est court, mieux c'est
2Ô∏è‚É£ **Privil√©giez le bio** quand le budget le permet
3Ô∏è‚É£ **Cuisinez maison** - vous contr√¥lez tout
4Ô∏è‚É£ **Circuits courts** - producteurs locaux
5Ô∏è‚É£ **Marques transparentes** - qui expliquent leurs proc√©d√©s

üõí **O√π acheter** : BioCoop, Naturalia, AMAP, march√©s, magasins vrac`;
      }
      
      suggestions = [
        "O√π acheter des produits plus sains ?",
        "Comment cuisiner maison facilement ?",
        "Marques bio recommand√©es"
      ];
    }
    else if (lowerMessage.includes('dangereux') || lowerMessage.includes('sant√©') || lowerMessage.includes('risque')) {
      if (context && context.novaGroup && context.novaGroup >= 4) {
        reply = `‚ö†Ô∏è **Impact sant√© - ${context.productName}** (NOVA ${context.novaGroup}) :

**√âtudes scientifiques r√©centes** :
‚Ä¢ +22% risque d√©pression (Nature 2024)
‚Ä¢ +53% risque diab√®te type 2 (BMJ 2024)  
‚Ä¢ +10% maladies cardiovasculaires (Lancet 2024)
‚Ä¢ Perturbation microbiote intestinal (INSERM 2024)

**Pourquoi ces risques ?**
üî¨ Ultra-transformation d√©truit la matrice alimentaire
üß™ Additifs perturbent l'absorption des nutriments
‚öóÔ∏è Proc√©d√©s industriels cr√©ent des compos√©s n√©oform√©s

**Rassurez-vous** : consommation occasionnelle acceptable !
**L'important** : 80% alimentation naturelle, 20% plaisir üòä`;
      } else {
        reply = `ü©∫ **Impact sant√© des aliments transform√©s** :

**Ultra-transform√©s (NOVA 4)** - √Ä limiter :
‚Ä¢ Perturbent le microbiote intestinal
‚Ä¢ Augmentent inflammation chronique
‚Ä¢ Pauvres en nutriments essentiels
‚Ä¢ Riches en calories vides

**Signaux d'alarme** :
‚ö†Ô∏è Plus de 5 ingr√©dients
‚ö†Ô∏è Noms d'ingr√©dients incompr√©hensibles  
‚ö†Ô∏è Additifs E-numbers multiples
‚ö†Ô∏è Dur√©e conservation tr√®s longue

**Bonne nouvelle** : notre corps s'adapte rapidement √† une meilleure alimentation ! üí™`;
      }
      
      suggestions = [
        "Quels additifs √©viter absolument ?",
        "Comment am√©liorer mon alimentation ?",
        "C'est grave si j'en mange parfois ?"
      ];
    }
    else if (lowerMessage.includes('additif') || lowerMessage.includes('e1') || lowerMessage.includes('conservateur')) {
      reply = `‚öóÔ∏è **Guide des additifs alimentaires** :

**üî¥ √Ä √©viter absolument** :
‚Ä¢ **E102, E110, E124** : Colorants li√©s hyperactivit√© enfants
‚Ä¢ **E320, E321** : BHA, BHT - perturbateurs endocriniens
‚Ä¢ **E249, E250** : Nitrites - canc√©rig√®nes potentiels
‚Ä¢ **E951** : Aspartame - controvers√©

**üü° Mod√©ration requise** :
‚Ä¢ **E471** : √âmulsifiants courants mais omnipr√©sents
‚Ä¢ **E330** : Acide citrique (naturel mais surajout√©)
‚Ä¢ **E407** : Carragh√©nanes - inflammation intestinale

**üü¢ G√©n√©ralement acceptables** :
‚Ä¢ **E300** : Vitamine C (acide ascorbique)
‚Ä¢ **E322** : L√©cithine (soja/tournesol)
‚Ä¢ **E170** : Carbonate de calcium (craie)

üí° **R√®gle d'or** : Moins de E-numbers = Mieux !`;
      
      suggestions = [
        "Comment √©viter ces additifs ?",
        "Pourquoi sont-ils autoris√©s ?",
        "App pour scanner les additifs"
      ];
    }
    else if (context && (lowerMessage.includes('score') || lowerMessage.includes('pourquoi'))) {
      const score = context.healthScore || context.score || 50;
      const novaGroup = context.novaGroup || 4;
      
      reply = `üìä **Analyse de ${context.productName}** :

**Score ECOLOJIA** : ${score}/100 ${score >= 70 ? '‚úÖ' : score >= 50 ? '‚ö†Ô∏è' : 'üö®'}
**Groupe NOVA** : ${novaGroup} ${novaGroup === 1 ? 'ü•¨' : novaGroup === 2 ? 'üßÇ' : novaGroup === 3 ? 'üçû' : 'üö®'}

**Facteurs du score** :
üî¨ **Transformation** : ${novaGroup >= 4 ? 'Ultra-industrielle (-30 pts)' : novaGroup >= 3 ? 'Mod√©r√©e (-15 pts)' : 'Minimale (+10 pts)'}
‚öóÔ∏è **Additifs** : ${context.additives?.length || 0} d√©tect√©(s) ${(context.additives?.length || 0) > 3 ? '(-20 pts)' : '(-5 pts)'}
üåø **Naturalit√©** : ${score >= 60 ? 'Acceptable' : 'Faible'}

**Conseil** : ${score < 40 ? 'Remplacer par alternative naturelle' : 
                 score < 60 ? 'Consommer occasionnellement' : 
                 'Produit acceptable dans alimentation √©quilibr√©e'}`;
      
      suggestions = [
        "Comment am√©liorer ce score ?",
        "Ingr√©dients les plus probl√©matiques",
        "Alternatives recommand√©es"
      ];
    }
    else if (lowerMessage.includes('bio') || lowerMessage.includes('biologique')) {
      reply = `üåø **Agriculture biologique vs conventionnelle** :

**Avantages du bio** :
‚úÖ **Sans pesticides** de synth√®se
‚úÖ **Moins d'additifs** autoris√©s (47 vs 300+)
‚úÖ **Respect environnement** et biodiversit√©
‚úÖ **Meilleure tra√ßabilit√©** des ingr√©dients
‚úÖ **OGM interdits** en agriculture bio

**Limites du bio** :
‚ö†Ô∏è Plus cher (20-40% en moyenne)
‚ö†Ô∏è Dur√©e conservation parfois r√©duite
‚ö†Ô∏è Peut √™tre ultra-transform√© quand m√™me !

**IMPORTANT** : Bio ‚â† forc√©ment sain
Un biscuit bio ultra-transform√© reste NOVA 4 !

üí° **Priorit√©s budget** : fruits/l√©gumes > c√©r√©ales > produits animaux`;
      
      suggestions = [
        "Bio vs local, que choisir ?",
        "Comment reconna√Ætre le vrai bio ?",
        "Dirty Dozen - produits √† acheter bio"
      ];
    }
    else if (lowerMessage.includes('lire') || lowerMessage.includes('√©tiquette')) {
      reply = `üîç **Guide lecture d'√©tiquette ECOLOJIA** :

**1Ô∏è‚É£ Liste ingr√©dients** (par ordre d√©croissant) :
‚Ä¢ ‚úÖ **< 5 ingr√©dients** = Excellent  
‚Ä¢ ‚ö†Ô∏è **5-10 ingr√©dients** = Acceptable
‚Ä¢ üö® **> 10 ingr√©dients** = Ultra-transform√© probable

**2Ô∏è‚É£ Signaux d'alarme** :
üö® Mots que vous ne connaissez pas
üö® E-numbers multiples (E102, E471...)
üö® Sirop de glucose-fructose
üö® Huiles hydrog√©n√©es

**3Ô∏è‚É£ Bon signaux** :
‚úÖ Certification bio
‚úÖ "Sans additifs"
‚úÖ "Fait artisanalement"
‚úÖ Origine des ingr√©dients indiqu√©e

**4Ô∏è‚É£ M√©fiance marketing** :
‚ö†Ô∏è "Naturel" (non r√©glement√©)
‚ö†Ô∏è "Enrichi en..." (compensation transformation)`;
      
      suggestions = [
        "Exemples d'√©tiquettes √† √©viter",
        "Labels fiables √† rechercher",
        "Apps pour scanner produits"
      ];
    }
    else if (lowerMessage.includes('am√©liorer') || lowerMessage.includes('conseil')) {
      reply = `üí™ **Plan d'am√©lioration alimentaire ECOLOJIA** :

**Semaine 1-2 : Audit personnel**
üì± Scannez vos produits habituels avec ECOLOJIA
üìù Identifiez vos 3 produits NOVA 4 les plus consomm√©s
üéØ Trouvez 1 alternative pour chacun

**Semaine 3-4 : Substitutions progressives**  
üîÑ Remplacez 1 produit ultra-transform√© par semaine
üè† Testez 2 recettes maison simples
üõí Explorez 1 nouveau magasin (bio, march√©)

**Mois 2 : Consolidation**
üë®‚Äçüç≥ Cuisinez 50% de vos repas
üìä Objectif : 80% NOVA 1-2, 20% plaisir
üéØ Score ECOLOJIA moyen > 60

**R√©sultats attendus** : √ânergie ‚ÜóÔ∏è, Digestion ‚ÜóÔ∏è, Bien-√™tre ‚ÜóÔ∏è`;
      
      suggestions = [
        "Recettes simples pour d√©buter",
        "Budget courses plus saines",
        "Meal prep facile"
      ];
    }
    else {
      // ‚úÖ R√©ponse par d√©faut intelligente
      reply = `ü§î Je comprends votre question !

En tant qu'assistant nutritionnel ECOLOJIA, je peux vous √©clairer sur :

üî¨ **Classification NOVA** et ultra-transformation
‚öóÔ∏è **D√©cryptage additifs** et ingr√©dients  
üîÑ **Alternatives plus saines** et o√π les trouver
ü©∫ **Impact sant√©** selon √©tudes scientifiques r√©centes
üõí **Conseils pratiques** pour mieux consommer
üìñ **Lecture d'√©tiquettes** et pi√®ges marketing

üí° **Reformulez votre question** ou cliquez sur une suggestion pour que je puisse mieux vous aider !`;
      
      suggestions = [
        "Expliquez-moi NOVA",
        "D√©cryptez des ingr√©dients",
        "Trouvez des alternatives",
        "Impact sur la sant√©",
        "Conseils pour mieux manger"
      ];
    }

    return { reply, suggestions };
  }
}

// ‚úÖ Instance globale du service
const chatService = new LocalChatService();

// ‚úÖ Fonction utilitaire pour cr√©er contexte
const createProductContext = (analysisData: any): ProductContext => {
  return {
    productName: analysisData.productName || analysisData.name || 'Produit analys√©',
    novaGroup: analysisData.novaGroup || analysisData.nova?.novaGroup,
    healthScore: analysisData.healthScore || analysisData.score || analysisData.nova?.healthScore,
    additives: analysisData.additives || analysisData.nova?.additives?.detected || [],
    ingredients: analysisData.ingredients || '',
    score: analysisData.score || analysisData.healthScore
  };
};

// ‚úÖ Questions pr√©d√©finies organis√©es
const SUGGESTED_QUESTIONS = [
  "Ce produit est-il bon pour la sant√© ?",
  "Quels sont les additifs pr√©occupants ?", 
  "Existe-t-il des alternatives plus saines ?",
  "Comment am√©liorer mon alimentation ?",
  "Que signifie le groupe NOVA 4 ?",
  "Pourquoi √©viter les produits ultra-transform√©s ?",
  "Quels sont les bienfaits des aliments bio ?",
  "Comment lire une √©tiquette nutritionnelle ?"
];

const ChatPage: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // √âtat du chat
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [context, setContext] = useState<ProductContext | null>(null);

  // ‚úÖ Initialisation am√©lior√©e
  useEffect(() => {
    // R√©cup√©rer le contexte depuis la navigation
    const analysisContext = location.state?.context;
    let productContext: ProductContext | null = null;

    if (analysisContext) {
      productContext = createProductContext(analysisContext);
      setContext(productContext);
      chatService.setProductContext(productContext);
    }

    // Message de bienvenue personnalis√©
    const welcomeMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'ai',
      content: productContext 
        ? `üî¨ Bonjour ! J'ai analys√© "${productContext.productName}" (NOVA ${productContext.novaGroup || '?'}, Score ${productContext.healthScore || productContext.score || '?'}/100).

Je peux r√©pondre √† toutes vos questions sur ce produit : ingr√©dients probl√©matiques, alternatives plus saines, impact sant√©, conseils nutritionnels...

Que voulez-vous savoir ? ü§î`
        : `ü§ñ Bonjour ! Je suis votre assistant nutritionnel ECOLOJIA.

Je vous aide √† :
‚Ä¢ üî¨ Comprendre la classification NOVA
‚Ä¢ ‚öóÔ∏è D√©coder les additifs alimentaires  
‚Ä¢ üîÑ Trouver des alternatives plus saines
‚Ä¢ ü©∫ √âvaluer l'impact sant√© de vos aliments
‚Ä¢ üí° Am√©liorer votre alimentation au quotidien

Posez-moi vos questions ou cliquez sur les suggestions ! üòä`,
      timestamp: new Date(),
      suggestions: chatService.getSuggestedQuestions(productContext)
    };

    setMessages([welcomeMessage]);

    // Message initial automatique si fourni
    const initialMessage = location.state?.initialMessage;
    if (initialMessage && typeof initialMessage === 'string') {
      setTimeout(() => {
        handleSendMessage(initialMessage);
      }, 1500);
    }
  }, [location.state]);

  // ‚úÖ Auto-scroll optimis√©
  useEffect(() => {
    const timer = setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
    return () => clearTimeout(timer);
  }, [messages, isTyping]);

  // ‚úÖ Gestion envoi message robuste
  const handleSendMessage = async (content: string) => {
    if (!content.trim() || isTyping) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: content.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      console.log('üí¨ Envoi message:', content);
      
      const response = await chatService.sendMessage(content, context || undefined);
      
      console.log('‚úÖ R√©ponse re√ßue:', response);

      const aiMessage: ChatMessage = {
        id: `ai_${Date.now()}`,
        type: 'ai',
        content: response.reply,
        timestamp: new Date(),
        suggestions: response.suggestions
      };

      setMessages(prev => [...prev, aiMessage]);
      
    } catch (error) {
      console.error('‚ùå Erreur ChatService:', error);
      
      const errorMessage: ChatMessage = {
        id: `error_${Date.now()}`,
        type: 'ai',
        content: `‚ùå D√©sol√©, probl√®me technique temporaire.

üí° **Solutions** :
‚Ä¢ V√©rifiez votre connexion internet
‚Ä¢ Reformulez avec des mots-cl√©s simples
‚Ä¢ R√©essayez dans quelques secondes

En attendant, je peux vous aider avec les bases :
üî¨ Classification NOVA
‚öóÔ∏è Additifs alimentaires
üîÑ Alternatives saines`,
        timestamp: new Date(),
        suggestions: ["R√©essayer", "Expliquer NOVA", "Lister additifs dangereux", "Retour accueil"]
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  // ‚úÖ Gestion suggestions avec anti-spam
  const handleSuggestionClick = (suggestion: string) => {
    if (isTyping) return;
    handleSendMessage(suggestion);
  };

  // ‚úÖ Navigation intelligente
  const handleBack = () => {
    if (context) {
      navigate('/search', { state: { fromChat: true } });
    } else {
      navigate('/');
    }
  };

  const handleSearchProducts = () => {
    navigate('/search');
  };

  const handleAnalyzeProduct = () => {
    navigate('/analyze');
  };

  // ‚úÖ Reset chat am√©lior√©
  const handleResetChat = () => {
    chatService.clearHistory();
    setMessages([]);
    setContext(null);
    chatService.setProductContext(null);
    
    const welcomeMessage: ChatMessage = {
      id: `reset_${Date.now()}`,
      type: 'ai',
      content: `üîÑ **Chat r√©initialis√© !**

Je suis de nouveau votre assistant nutritionnel ECOLOJIA.
Pr√™t √† vous aider sur tous les sujets alimentation et sant√© !

Comment puis-je vous aider aujourd'hui ? üòä`,
      timestamp: new Date(),
      suggestions: chatService.getSuggestedQuestions()
    };
    
    setMessages([welcomeMessage]);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header am√©lior√© */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10 shadow-sm">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button
              onClick={handleBack}
              className="flex items-center text-gray-600 hover:text-gray-800 font-medium transition-colors group"
            >
              <ArrowLeft className="w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform" />
              Retour
            </button>
            
            <h1 className="text-xl font-bold text-gray-800 flex items-center">
              <MessageCircle className="w-6 h-6 mr-2 text-green-500" />
              Assistant Nutritionnel
              {context && (
                <span className="ml-2 text-sm bg-green-100 text-green-700 px-2 py-1 rounded-full">
                  NOVA {context.novaGroup || '?'}
                </span>
              )}
            </h1>
            
            <div className="flex space-x-1">
              <button
                onClick={handleResetChat}
                className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all"
                title="Nouveau chat"
              >
                <RefreshCw className="w-5 h-5" />
              </button>
              <button
                onClick={handleSearchProducts}
                className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all"
                title="Rechercher des produits"
              >
                <Search className="w-5 h-5" />
              </button>
              <button
                onClick={handleAnalyzeProduct}
                className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all"
                title="Analyser un produit"
              >
                <Zap className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Zone messages avec contexte */}
      <div className="flex-1 overflow-hidden">
        <div className="max-w-4xl mx-auto px-4 py-6 h-full flex flex-col">
          
          {/* Contexte produit am√©lior√© */}
          {context && (
            <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-xl p-4 mb-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <h3 className="font-bold text-green-800 flex items-center">
                    üì¶ Produit analys√©
                    <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                      Active
                    </span>
                  </h3>
                  <p className="text-green-700 font-medium mt-1">{context.productName}</p>
                  <div className="flex items-center space-x-4 mt-2 text-sm text-green-600">
                    <span className="flex items-center">
                      üî¨ NOVA {context.novaGroup || '?'}
                    </span>
                    <span className="flex items-center">
                      üìä Score: {context.healthScore || context.score || '?'}/100
                    </span>
                    {context.additives && context.additives.length > 0 && (
                      <span className="flex items-center">
                        ‚öóÔ∏è {context.additives.length} additif(s)
                      </span>
                    )}
                  </div>
                </div>
                <button
                  onClick={() => setContext(null)}
                  className="text-green-600 hover:text-green-800 hover:bg-green-100 p-1 rounded transition-all"
                  title="Retirer le contexte"
                >
                  ‚úï
                </button>
              </div>
            </div>
          )}

          {/* Messages */}
          <div className="flex-1 overflow-y-auto space-y-6 pb-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-xs md:max-w-md lg:max-w-2xl ${
                  message.type === 'user' 
                    ? 'bg-green-500 text-white' 
                    : 'bg-white border border-gray-200'
                } rounded-2xl px-5 py-4 shadow-sm hover:shadow-md transition-shadow`}>
                  
                  {/* Avatar et nom */}
                  <div className="flex items-center mb-3">
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center mr-2 ${
                      message.type === 'user' ? 'bg-white/20' : 'bg-green-100'
                    }`}>
                      {message.type === 'user' ? (
                        <User className="w-4 h-4 text-white" />
                      ) : (
                        <Bot className="w-4 h-4 text-green-600" />
                      )}
                    </div>
                    <span className={`text-sm font-medium ${
                      message.type === 'user' ? 'text-white/90' : 'text-gray-700'
                    }`}>
                      {message.type === 'user' ? 'Vous' : 'Assistant ECOLOJIA'}
                    </span>
                  </div>

                  {/* Contenu message */}
                  <div className={`text-sm leading-relaxed ${
                    message.type === 'user' ? 'text-white' : 'text-gray-800'
                  }`}>
                    {message.content.split('\n').map((line, index) => {
                      if (line.startsWith('**') && line.endsWith('**')) {
                        return (
                          <div key={index} className={`font-bold ${index > 0 ? 'mt-3' : ''}`}>
                            {line.replace(/\*\*/g, '')}
                          </div>
                        );
                      }
                      return (
                        <div key={index} className={index > 0 ? 'mt-2' : ''}>
                          {line}
                        </div>
                      );
                    })}
                  </div>

                  {/* Suggestions */}
                  {message.suggestions && message.suggestions.length > 0 && (
                    <div className="mt-4 space-y-2">
                      <div className="text-xs font-medium text-green-600 mb-2">
                        üí° Suggestions :
                      </div>
                      {message.suggestions.map((suggestion, index) => (
                        <button
                          key={index}
                          onClick={() => handleSuggestionClick(suggestion)}
                          disabled={isTyping}
                          className="block w-full text-left text-sm bg-green-50 hover:bg-green-100 disabled:bg-gray-100 disabled:text-gray-500 text-green-700 px-3 py-2 rounded-lg transition-all border border-green-200 hover:border-green-300"
                        >
                          {suggestion}
                        </button>
                      ))}
                    </div>
                  )}

                  {/* Timestamp */}
                  <div className={`text-xs mt-3 ${
                    message.type === 'user' ? 'text-white/70' : 'text-gray-400'
                  }`}>
                    {message.timestamp.toLocaleTimeString('fr-FR', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                </div>
              </div>
            ))}

            {/* Typing indicator am√©lior√© */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-white border border-gray-200 rounded-2xl px-5 py-4 shadow-sm">
                  <div className="flex items-center mb-2">
                    <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mr-2">
                      <Bot className="w-4 h-4 text-green-600" />
                    </div>
                    <span className="text-sm font-medium text-gray-700">Assistant ECOLOJIA</span>
                  </div>
                  <div className="flex items-center">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                    <span className="ml-3 text-sm text-gray-500">r√©fl√©chit...</span>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Questions sugg√©r√©es pour nouveaux utilisateurs */}
          {messages.filter(m => m.type === 'user').length === 0 && !isTyping && (
            <div className="mt-6 mb-4">
              <p className="text-sm text-gray-600 mb-4 text-center font-medium">
                üí° Questions fr√©quentes pour commencer :
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {SUGGESTED_QUESTIONS.slice(0, 6).map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleSuggestionClick(question)}
                    disabled={isTyping}
                    className="text-left text-sm bg-white hover:bg-blue-50 disabled:bg-gray-100 disabled:text-gray-500 border border-gray-200 hover:border-blue-300 px-4 py-3 rounded-xl transition-all duration-200 hover:shadow-sm group"
                  >
                    <span className="group-hover:text-blue-700">{question}</span>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Zone de saisie am√©lior√©e */}
          <div className="bg-white border border-gray-200 rounded-xl p-4 mt-4 shadow-sm">
            <div className="flex space-x-3">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage(inputValue);
                  }
                }}
                placeholder="Posez votre question sur la nutrition, les additifs, NOVA..."
                className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all"
                disabled={isTyping}
              />
              <button
                onClick={() => handleSendMessage(inputValue)}
                disabled={!inputValue.trim() || isTyping}
                className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white px-6 py-3 rounded-xl transition-all flex items-center hover:shadow-md disabled:cursor-not-allowed"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
            
            <div className="mt-3 flex items-center justify-between text-xs">
              <span className="text-gray-500">
                Appuyez sur Entr√©e pour envoyer ‚Ä¢ IA nutritionnelle ECOLOJIA
              </span>
              <span className="text-green-600 font-medium">
                üí¨ {messages.length} messages
                {context && ` ‚Ä¢ üì¶ ${context.productName}`}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatPage;