// PATH: frontend/ecolojiaFrontV3/src/services/ai/DeepSeekECOLOJIAService.ts

export type UserTier = 'free' | 'premium';
export type AssistantType = 'nutritionist' | 'dermatologist' | 'eco_expert' | 'general';

export interface DeepSeekConfig {
  model: 'deepseek-chat' | 'deepseek-reasoner';
  temperature: number;
  maxTokens: number;
  costPer1MTokens: number;
  responseQuality: 'basic' | 'advanced';
}

export interface UserLimits {
  dailyQuestions: number;
  maxTokensPerQuestion: number;
  availableCategories: string[];
  aiModel: 'deepseek-chat' | 'deepseek-reasoner';
  detailedAnalysis: boolean;
  expertRecommendations: boolean;
  multiProductComparison: boolean;
}

export interface ProductContext {
  productName: string;
  category: 'alimentaire' | 'cosmetique' | 'detergent';
  
  // Donn√©es communes
  healthScore: number;
  barcode?: string;
  
  // Alimentaire
  novaGroup?: number;
  nutriScore?: string;
  additives?: Array<{
    code: string;
    name: string;
    riskLevel: 'low' | 'medium' | 'high';
  }>;
  
  // Cosm√©tique
  inciIngredients?: string[];
  skinType?: string[];
  naturalityScore?: number;
  
  // D√©tergent
  ecoScore?: number;
  biodegradability?: string;
  environmentalImpact?: string;
}

class DeepSeekECOLOJIAService {
  private readonly API_KEY = process.env.REACT_APP_DEEPSEEK_API_KEY;
  private readonly BASE_URL = 'https://api.deepseek.com/v1/chat/completions';
  
  // üí∞ CONFIGURATION √âCONOMIQUE DEEPSEEK
  private readonly DEEPSEEK_CONFIGS: Record<UserTier, DeepSeekConfig> = {
    free: {
      model: 'deepseek-chat',
      temperature: 0.7,
      maxTokens: 2000,
      costPer1MTokens: 0.27, // $0.27 pour 1M tokens
      responseQuality: 'basic'
    },
    premium: {
      model: 'deepseek-reasoner', 
      temperature: 0.8,
      maxTokens: 8000,
      costPer1MTokens: 0.55, // $0.55 pour 1M tokens (meilleure qualit√©)
      responseQuality: 'advanced'
    }
  };

  // üéØ LIMITES FREEMIUM
  private readonly USER_LIMITS: Record<UserTier, UserLimits> = {
    free: {
      dailyQuestions: 5,
      maxTokensPerQuestion: 2000,
      availableCategories: ['alimentaire'], // Alimentaire uniquement
      aiModel: 'deepseek-chat',
      detailedAnalysis: false,
      expertRecommendations: false,
      multiProductComparison: false
    },
    premium: {
      dailyQuestions: -1, // Illimit√©
      maxTokensPerQuestion: 8000,
      availableCategories: ['alimentaire', 'cosmetique', 'detergent'],
      aiModel: 'deepseek-reasoner',
      detailedAnalysis: true,
      expertRecommendations: true,
      multiProductComparison: true
    }
  };

  // üî¨ PROMPTS SP√âCIALIS√âS DEEPSEEK
  private readonly SPECIALIZED_PROMPTS = {
    nutritionist: {
      free: `Tu es un assistant nutritionnel ECOLOJIA utilisant la classification NOVA.

ANALYSE BASIQUE (Version Gratuite) :
- Classification NOVA 1-4 simple
- D√©tection additifs majeurs uniquement  
- Conseils g√©n√©raux nutrition
- R√©ponses concises et claires

LIMITATION : Analyses alimentaires de base uniquement.
STYLE : Accessible, bienveillant, factuel.
LONGUEUR : Maximum 300 mots.`,

      premium: `Tu es Dr. Marie Dubois, di√©t√©ticienne-nutritionniste experte ECOLOJIA avec acc√®s complet.

ANALYSE AVANC√âE (Version Premium) :
- Classification NOVA d√©taill√©e avec justifications INSERM
- Analyse compl√®te additifs E-numbers + risques EFSA
- Impact microbiote intestinal scientifique
- Recommandations personnalis√©es pouss√©es
- Alternatives sp√©cifiques avec comparatifs
- Conseils selon profils (diab√®te, allergies, etc.)

EXPERTISE DEEPSEEK :
- Utilise tes capacit√©s de raisonnement avanc√©
- Analyses multi-facteurs complexes
- Corr√©lations scientifiques approfondies
- Recommandations sur-mesure

STYLE : Professionnel expert, r√©f√©rences scientifiques, conseils d√©taill√©s.
LONGUEUR : Analyses compl√®tes jusqu'√† 1000 mots si n√©cessaire.`
    },

    dermatologist: {
      premium: `Tu es Dr. Sophie Laurent, dermatologue et chimiste cosm√©tique, experte INCI.

ANALYSE COSM√âTIQUE PREMIUM :
- D√©codage INCI complet avec fonctions
- D√©tection perturbateurs endocriniens (ANSES/REACH)
- Identification 26 allerg√®nes r√©glementaires UE
- Score naturalit√© avec calcul d√©taill√©
- Conseils selon types de peau sp√©cifiques
- Alternatives clean beauty personnalis√©es

DEEPSEEK REASONING :
- Corr√©lations ingr√©dients/effets complexes
- Analyses crois√©es composition/tol√©rance
- Recommandations multi-crit√®res avanc√©es

RESTRICTION FREEMIUM : Cette expertise est r√©serv√©e aux utilisateurs Premium.
Si utilisateur gratuit ‚Üí Rediriger vers upgrade Premium pour cosm√©tiques.`
    },

    eco_expert: {
      premium: `Tu es Dr. Thomas Moreau, √©co-toxicologue expert REACH et d√©tergents.

ANALYSE ENVIRONNEMENTALE PREMIUM :
- √âvaluation biod√©gradabilit√© OECD 301-310
- Toxicit√© aquatique selon CLP/REACH
- Impact cycle de vie d√©taill√©
- √âmissions COV et qualit√© air int√©rieur
- Labels √©cologiques et certifications
- Alternatives √©cologiques performantes

DEEPSEEK ECO-REASONING :
- Calculs impacts environnementaux complexes
- Analyses co√ªt/b√©n√©fice √©cologique
- Recommandations usage optimal

RESTRICTION FREEMIUM : Expertise d√©tergents r√©serv√©e Premium.
Si utilisateur gratuit ‚Üí Sugg√©rer upgrade pour analyses environnementales.`
    }
  };

  // üíæ TRACKING USAGE LOCAL
  private usageTracking = new Map<string, Array<{
    date: string;
    questions: number;
    tokens: number;
    category: string;
  }>>();

  /**
   * üöÄ ENVOI MESSAGE DEEPSEEK
   */
  async sendMessage(
    message: string,
    userTier: UserTier,
    userId: string,
    context?: ProductContext,
    assistantType: AssistantType = 'general'
  ): Promise<{
    reply: string;
    tokensUsed: number;
    cost: number;
    suggestions: string[];
    upgradePrompt?: string;
  }> {
    
    // 1Ô∏è‚É£ V√âRIFICATION LIMITES
    const limitsCheck = await this.checkLimits(userId, userTier, context?.category);
    if (!limitsCheck.allowed) {
      return {
        reply: limitsCheck.message,
        tokensUsed: 0,
        cost: 0,
        suggestions: ['Upgrade Premium', 'Voir mes limites'],
        upgradePrompt: limitsCheck.upgradePrompt
      };
    }

    // 2Ô∏è‚É£ CONFIGURATION DEEPSEEK
    const config = this.DEEPSEEK_CONFIGS[userTier];
    const prompt = this.buildSpecializedPrompt(assistantType, userTier, message, context);

    try {
      // 3Ô∏è‚É£ APPEL API DEEPSEEK
      const response = await fetch(this.BASE_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: config.model,
          messages: [
            {
              role: 'system',
              content: prompt.systemPrompt
            },
            {
              role: 'user', 
              content: prompt.userMessage
            }
          ],
          temperature: config.temperature,
          max_tokens: config.maxTokens,
          stream: false
        })
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API Error: ${response.status}`);
      }

      const data = await response.json();
      const aiReply = data.choices[0].message.content;
      const tokensUsed = data.usage.total_tokens;
      const cost = this.calculateCost(tokensUsed, config.costPer1MTokens);

      // 4Ô∏è‚É£ TRACKING USAGE
      this.trackUsage(userId, tokensUsed, context?.category || 'general');

      // 5Ô∏è‚É£ SUGGESTIONS CONTEXTUELLES
      const suggestions = this.generateSuggestions(userTier, assistantType, context);

      return {
        reply: aiReply,
        tokensUsed,
        cost,
        suggestions,
        ...(userTier === 'free' && { upgradePrompt: this.getUpgradePrompt(assistantType) })
      };

    } catch (error) {
      console.error('Erreur DeepSeek:', error);
      
      // FALLBACK INTELLIGENT LOCAL
      return this.getFallbackResponse(message, userTier, assistantType, context);
    }
  }

  /**
   * üîí V√âRIFICATION LIMITES FREEMIUM
   */
  private async checkLimits(
    userId: string, 
    userTier: UserTier, 
    category?: string
  ): Promise<{
    allowed: boolean;
    message: string;
    upgradePrompt?: string;
  }> {
    const limits = this.USER_LIMITS[userTier];
    
    // PREMIUM = Acc√®s total
    if (userTier === 'premium') {
      return { allowed: true, message: 'Acc√®s Premium complet' };
    }

    // GRATUIT = Limitations
    const today = new Date().toISOString().split('T')[0];
    const userUsage = this.usageTracking.get(userId) || [];
    const dailyUsage = userUsage.filter(u => u.date === today);
    const questionsToday = dailyUsage.reduce((sum, u) => sum + u.questions, 0);

    // Limite quotidienne
    if (questionsToday >= limits.dailyQuestions) {
      return {
        allowed: false,
        message: `üîí Limite quotidienne atteinte (${limits.dailyQuestions} questions/jour en version gratuite).\n\n‚≠ê **Passez Premium** pour un acc√®s illimit√© !`,
        upgradePrompt: 'Vous avez atteint votre limite quotidienne. Upgrade vers Premium pour continuer ?'
      };
    }

    // Cat√©gories restreintes
    if (category && !limits.availableCategories.includes(category)) {
      const categoryLabels = {
        'cosmetique': 'cosm√©tiques',
        'detergent': 'd√©tergents'
      };
      
      return {
        allowed: false,
        message: `üîí L'analyse des produits **${categoryLabels[category as keyof typeof categoryLabels]}** est r√©serv√©e aux utilisateurs Premium.\n\n‚ú® Version gratuite : **Alimentaire uniquement**\nüíé Version Premium : **Alimentaire + Cosm√©tiques + D√©tergents**`,
        upgradePrompt: `Upgrade Premium pour analyser les ${categoryLabels[category as keyof typeof categoryLabels]} ?`
      };
    }

    return { allowed: true, message: 'Acc√®s autoris√©' };
  }

  /**
   * üîß CONSTRUCTION PROMPTS SP√âCIALIS√âS
   */
  private buildSpecializedPrompt(
    assistantType: AssistantType,
    userTier: UserTier,
    message: string,
    context?: ProductContext
  ): { systemPrompt: string; userMessage: string } {
    
    // Prompt syst√®me selon assistant et tier
    let systemPrompt = '';
    
    if (assistantType === 'nutritionist') {
      systemPrompt = this.SPECIALIZED_PROMPTS.nutritionist[userTier] || this.SPECIALIZED_PROMPTS.nutritionist.free;
    } else if (assistantType === 'dermatologist' && userTier === 'premium') {
      systemPrompt = this.SPECIALIZED_PROMPTS.dermatologist.premium;
    } else if (assistantType === 'eco_expert' && userTier === 'premium') {
      systemPrompt = this.SPECIALIZED_PROMPTS.eco_expert.premium;
    } else {
      // Assistant g√©n√©ral ou restriction freemium
      systemPrompt = `Tu es l'assistant ECOLOJIA. ${userTier === 'free' ? 'Version gratuite - analyses alimentaires basiques uniquement.' : 'Version Premium - acc√®s complet.'}`;
    }

    // Message utilisateur enrichi du contexte
    let userMessage = message;
    if (context) {
      userMessage = `CONTEXTE PRODUIT :
Nom: ${context.productName}
Cat√©gorie: ${context.category}
Score sant√©: ${context.healthScore}/100
${context.novaGroup ? `Groupe NOVA: ${context.novaGroup}` : ''}
${context.additives ? `Additifs d√©tect√©s: ${context.additives.length}` : ''}

QUESTION UTILISATEUR : ${message}`;
    }

    return { systemPrompt, userMessage };
  }

  /**
   * üí∞ CALCUL CO√õTS
   */
  private calculateCost(tokens: number, costPer1M: number): number {
    return (tokens / 1000000) * costPer1M;
  }

  /**
   * üìä TRACKING USAGE
   */
  private trackUsage(userId: string, tokens: number, category: string): void {
    const today = new Date().toISOString().split('T')[0];
    const userUsage = this.usageTracking.get(userId) || [];
    
    userUsage.push({
      date: today,
      questions: 1,
      tokens,
      category
    });
    
    this.usageTracking.set(userId, userUsage);
  }

  /**
   * üí° SUGGESTIONS CONTEXTUELLES
   */
  private generateSuggestions(
    userTier: UserTier,
    assistantType: AssistantType,
    context?: ProductContext
  ): string[] {
    const baseSuggestions = [
      'Analyser un autre produit',
      'Conseils nutrition g√©n√©rale'
    ];

    if (userTier === 'premium') {
      if (assistantType === 'nutritionist') {
        baseSuggestions.push('Alternatives personnalis√©es', 'Impact microbiote');
      } else if (assistantType === 'dermatologist') {
        baseSuggestions.push('Analyse INCI d√©taill√©e', 'Conseils peau sensible');
      } else if (assistantType === 'eco_expert') {
        baseSuggestions.push('Impact environnemental', 'Labels √©cologiques');
      }
    } else {
      baseSuggestions.push('üîì Upgrade Premium');
    }

    return baseSuggestions;
  }

  /**
   * ‚¨ÜÔ∏è PROMPTS UPGRADE
   */
  private getUpgradePrompt(assistantType: AssistantType): string {
    const benefits = {
      nutritionist: 'analyses nutritionnelles avanc√©es',
      dermatologist: 'analyses cosm√©tiques expertes',
      eco_expert: 'analyses environnementales d√©taill√©es',
      general: 'acc√®s complet multi-cat√©gories'
    };

    return `üîì **Passez Premium** pour d√©bloquer ${benefits[assistantType]} avec DeepSeek Reasoner !`;
  }

  /**
   * üÜò FALLBACK LOCAL INTELLIGENT
   */
  private getFallbackResponse(
    message: string,
    userTier: UserTier,
    assistantType: AssistantType,
    context?: ProductContext
  ): {
    reply: string;
    tokensUsed: number;
    cost: number;
    suggestions: string[];
    upgradePrompt?: string;
  } {
    let reply = '';
    
    if (userTier === 'free') {
      reply = `ü§ñ **ECOLOJIA Gratuit - Assistant Nutritionnel**

D√©sol√©, je rencontre un probl√®me de connexion avec l'IA DeepSeek. 

üì± **En version gratuite, vous avez acc√®s √† :**
‚Ä¢ 5 questions/jour sur les produits alimentaires
‚Ä¢ Classification NOVA basique
‚Ä¢ Conseils nutrition g√©n√©raux

üíé **Passez Premium pour :**
‚Ä¢ Questions illimit√©es
‚Ä¢ Cosm√©tiques + D√©tergents  
‚Ä¢ Analyses expertes DeepSeek Reasoner
‚Ä¢ Recommandations personnalis√©es

Reformulez votre question ou essayez plus tard !`;
    } else {
      reply = `üîß Probl√®me technique temporaire avec DeepSeek. Service restaur√© sous peu.`;
    }

    return {
      reply,
      tokensUsed: 0,
      cost: 0,
      suggestions: ['R√©essayer', 'Upgrade Premium', 'Support'],
      upgradePrompt: userTier === 'free' ? 'Probl√®me connexion. Upgrade Premium pour priorit√© serveur ?' : undefined
    };
  }

  /**
   * üìà STATISTIQUES UTILISATEUR
   */
  getUserStats(userId: string): {
    dailyUsed: number;
    dailyLimit: number;
    monthlyUsed: number;
    totalCost: number;
    categories: string[];
  } {
    const userUsage = this.usageTracking.get(userId) || [];
    const today = new Date().toISOString().split('T')[0];
    const currentMonth = new Date().toISOString().slice(0, 7);
    
    const dailyUsage = userUsage.filter(u => u.date === today);
    const monthlyUsage = userUsage.filter(u => u.date.startsWith(currentMonth));
    
    return {
      dailyUsed: dailyUsage.reduce((sum, u) => sum + u.questions, 0),
      dailyLimit: this.USER_LIMITS.free.dailyQuestions,
      monthlyUsed: monthlyUsage.reduce((sum, u) => sum + u.questions, 0),
      totalCost: monthlyUsage.reduce((sum, u) => sum + this.calculateCost(u.tokens, 0.27), 0),
      categories: [...new Set(userUsage.map(u => u.category))]
    };
  }
}

// Instance singleton
export const deepSeekService = new DeepSeekECOLOJIAService();
export default DeepSeekECOLOJIAService;